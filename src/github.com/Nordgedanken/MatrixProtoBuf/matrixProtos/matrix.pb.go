// Code generated by protoc-gen-go. DO NOT EDIT.
// source: matrix.proto

/*
Package matrixProtos is a generated protocol buffer package.

It is generated from these files:
	matrix.proto

It has these top-level messages:
	VersionsResponse
	Version
	VersionRequest
	LoginRequest
	LoginResponse
	LoginError
*/
package matrixProtos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionsResponse struct {
	Versions []*Version `protobuf:"bytes,1,rep,name=versions" json:"versions,omitempty"`
}

func (m *VersionsResponse) Reset()                    { *m = VersionsResponse{} }
func (m *VersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionsResponse) ProtoMessage()               {}
func (*VersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VersionsResponse) GetVersions() []*Version {
	if m != nil {
		return m.Versions
	}
	return nil
}

type Version struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *Version) Reset()                    { *m = Version{} }
func (m *Version) String() string            { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()               {}
func (*Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Version) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type VersionRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VersionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LoginRequest struct {
	Type     string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Medium   string `protobuf:"bytes,4,opt,name=medium" json:"medium,omitempty"`
	Address  string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LoginRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginRequest) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *LoginRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type LoginResponse struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	HomeServer   string `protobuf:"bytes,2,opt,name=home_server,json=homeServer" json:"home_server,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RefreshToken string `protobuf:"bytes,4,opt,name=refresh_token,json=refreshToken" json:"refresh_token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *LoginResponse) GetHomeServer() string {
	if m != nil {
		return m.HomeServer
	}
	return ""
}

func (m *LoginResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *LoginResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type LoginError struct {
	Errcode string `protobuf:"bytes,1,opt,name=errcode" json:"errcode,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *LoginError) Reset()                    { *m = LoginError{} }
func (m *LoginError) String() string            { return proto.CompactTextString(m) }
func (*LoginError) ProtoMessage()               {}
func (*LoginError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginError) GetErrcode() string {
	if m != nil {
		return m.Errcode
	}
	return ""
}

func (m *LoginError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionsResponse)(nil), "matrixProtos.VersionsResponse")
	proto.RegisterType((*Version)(nil), "matrixProtos.Version")
	proto.RegisterType((*VersionRequest)(nil), "matrixProtos.VersionRequest")
	proto.RegisterType((*LoginRequest)(nil), "matrixProtos.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "matrixProtos.LoginResponse")
	proto.RegisterType((*LoginError)(nil), "matrixProtos.LoginError")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VersionsService service

type VersionsServiceClient interface {
	Versions(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionsResponse, error)
}

type versionsServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionsServiceClient(cc *grpc.ClientConn) VersionsServiceClient {
	return &versionsServiceClient{cc}
}

func (c *versionsServiceClient) Versions(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionsResponse, error) {
	out := new(VersionsResponse)
	err := grpc.Invoke(ctx, "/matrixProtos.VersionsService/Versions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionsService service

type VersionsServiceServer interface {
	Versions(context.Context, *VersionRequest) (*VersionsResponse, error)
}

func RegisterVersionsServiceServer(s *grpc.Server, srv VersionsServiceServer) {
	s.RegisterService(&_VersionsService_serviceDesc, srv)
}

func _VersionsService_Versions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsServiceServer).Versions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrixProtos.VersionsService/Versions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsServiceServer).Versions(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "matrixProtos.VersionsService",
	HandlerType: (*VersionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Versions",
			Handler:    _VersionsService_Versions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matrix.proto",
}

// Client API for LoginService service

type LoginServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type loginServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoginServiceClient(cc *grpc.ClientConn) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/matrixProtos.LoginService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoginService service

type LoginServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
}

func RegisterLoginServiceServer(s *grpc.Server, srv LoginServiceServer) {
	s.RegisterService(&_LoginService_serviceDesc, srv)
}

func _LoginService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrixProtos.LoginService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "matrixProtos.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LoginService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matrix.proto",
}

func init() { proto.RegisterFile("matrix.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x3f, 0x4f, 0xe3, 0x40,
	0x10, 0xc5, 0xe5, 0xcb, 0xdf, 0x9b, 0x38, 0x77, 0xa7, 0xd5, 0xfd, 0xb1, 0x7c, 0x08, 0x82, 0xd3,
	0x44, 0x14, 0x91, 0x08, 0x2d, 0x05, 0x4d, 0x24, 0x90, 0x28, 0xa2, 0x80, 0x68, 0x28, 0x22, 0x63,
	0x0f, 0xc4, 0x42, 0xce, 0x9a, 0x19, 0x27, 0x40, 0xcf, 0x17, 0xe0, 0x1b, 0xa3, 0x5d, 0xcf, 0x5a,
	0x89, 0x94, 0x6e, 0xdf, 0x6f, 0xde, 0x8c, 0xde, 0xee, 0x2c, 0xf8, 0x79, 0x5c, 0x52, 0xf6, 0x36,
	0x2e, 0x48, 0x97, 0x5a, 0x89, 0x9a, 0x19, 0xc1, 0xd1, 0x14, 0x7e, 0xdd, 0x21, 0x71, 0xa6, 0x57,
	0x3c, 0x47, 0x2e, 0xf4, 0x8a, 0x51, 0x9d, 0x42, 0x77, 0x23, 0x2c, 0xf0, 0x06, 0x8d, 0x51, 0x6f,
	0xf2, 0x67, 0xbc, 0xdd, 0x34, 0x96, 0x8e, 0x79, 0x6d, 0x8b, 0x86, 0xd0, 0x11, 0xa8, 0x02, 0xe8,
	0x08, 0x0e, 0xbc, 0x81, 0x37, 0xfa, 0x3e, 0x77, 0x32, 0x3a, 0x81, 0x1f, 0xae, 0x13, 0x5f, 0xd6,
	0xc8, 0xa5, 0xf1, 0xc6, 0x69, 0x4a, 0xc8, 0xec, 0xbc, 0x22, 0xa3, 0x0f, 0x0f, 0xfc, 0x6b, 0xfd,
	0x94, 0xd5, 0x56, 0x05, 0xcd, 0xf2, 0xbd, 0x40, 0xf1, 0xd9, 0xb3, 0x61, 0x6b, 0x46, 0x0a, 0xbe,
	0x55, 0xcc, 0x9c, 0x55, 0x08, 0xdd, 0x22, 0x66, 0x7e, 0xd5, 0x94, 0x06, 0x0d, 0xcb, 0x6b, 0xad,
	0xfe, 0x42, 0x3b, 0xc7, 0x34, 0x5b, 0xe7, 0x41, 0xd3, 0x56, 0x44, 0x6d, 0xc7, 0x68, 0xed, 0xc6,
	0xf8, 0xf4, 0xa0, 0x2f, 0x31, 0xe4, 0x71, 0x8e, 0xc1, 0x8f, 0x93, 0x04, 0x99, 0x17, 0xa5, 0x7e,
	0x46, 0x77, 0xc7, 0x5e, 0xc5, 0x6e, 0x0d, 0x52, 0x47, 0xd0, 0x5b, 0xea, 0x1c, 0x17, 0x8c, 0xb4,
	0xa9, 0xd3, 0x81, 0x41, 0x37, 0x96, 0xa8, 0x7f, 0xd0, 0x31, 0x59, 0x17, 0x99, 0x8b, 0xd8, 0x36,
	0xf2, 0x2a, 0x55, 0x43, 0xe8, 0x13, 0x3e, 0x12, 0xf2, 0x52, 0xa6, 0x57, 0x39, 0x7d, 0x81, 0x76,
	0x7c, 0x74, 0x0e, 0x60, 0x23, 0x4d, 0x89, 0x34, 0x99, 0xec, 0x48, 0x94, 0xe8, 0xd4, 0x3d, 0x8d,
	0x93, 0xea, 0x37, 0xb4, 0xd0, 0x58, 0x24, 0x40, 0x25, 0x26, 0xf7, 0xf0, 0xd3, 0x2d, 0xdc, 0xa4,
	0xc9, 0x12, 0x54, 0x97, 0xd0, 0x75, 0x48, 0x1d, 0xec, 0xdf, 0x74, 0xb5, 0x84, 0xf0, 0x70, 0x6f,
	0xb5, 0xfe, 0x39, 0x93, 0x99, 0x2c, 0xcd, 0x4d, 0xbe, 0x80, 0x96, 0xd5, 0x2a, 0xdc, 0x6d, 0xdc,
	0xde, 0x6c, 0xf8, 0x7f, 0x6f, 0xad, 0x9a, 0xf8, 0xd0, 0xb6, 0x9f, 0xf6, 0xec, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0x4a, 0x17, 0x1e, 0xc4, 0x02, 0x00, 0x00,
}
